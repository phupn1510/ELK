input {
    beats {
        port => 5044    
 
   }
     beats {
      port => 5000
    codec => plain {
  charset => "UTF-8"
}
#   codec => "json" 
}
}
filter {

  if [type] == "tshark" {
mutate {
  add_tag => [ "null" ]
    gsub => [
      # Replace all NULL characters empty string. Do this to the message field first which will apply to all fields instead of specifying individual fields.
      "message", "[\u0000]", ""
      ]
  }
}
if "null" in [tags] {
#tshark.exe -a duration:60 -i 1 -t ad -T fields -e frame.number -e ip.src -e ip.dst -e frame.len -e frame.time -e frame.time_relative -E header=y -E separator=',' > D:\tshark.csv
#-e _ws.col.Time -e _ws.col.Source -e _ws.col.Destination -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport -e _ws.col.Protocol -e ip.len -e _ws.col.Info
  csv {
      separator => ","
    columns => [ "col.Time", "col.Source", "col.Destination", "ip.src", "ip.dst", "tcp.srcport", "tcp.dstport", "col.Protocol", "ip.len", "col.Info" ]

     add_tag => [ "tshark" ]
   }
  # mutate {
  #add_tag => [ "null" ]
   # gsub => [
      # Replace all NULL characters empty string. Do this to the message field first which will apply to all fields instead of specifying individual fields.
    #  "col.Protocol", "[\u0000]", ""
     # ]
 # }
}
  #}
  #kv {
  # source => "[col][Protocol]" 
  #  trim => " "
 # }
 # mutate {

#   convert => [ "ip.len", "integer" ]
 #   convert => [ "col.Protocol", "string" ]
 ## }
  #date {
  # match => [ "col.Time", "YYYY-MM-dd HH:mm:ss.SSSSSS" ]
  #}

grok {
match => [ "message", "%{TIMESTAMP_ISO8601:timestampiis} %{NOTSPACE:s-sitename} %{WORD:cs-method} %{URIPATH:cs-uri-stem} %{NOTSPACE:cs-uri-query} %{NUMBER:s-port} %{NOTSPACE:cs-username} %{IPORHOST:clientip} %{NOTSPACE:cs(User-Agent)} %{NOTSPACE:cs(Cookie)} %{NOTSPACE:cs(Referer)} %{NOTSPACE:cs-host} %{NUMBER:sc-status:int} %{NUMBER:sc-substatus:int} %{NUMBER:sc-win32-status:int} %{NUMBER:sc-bytes:int} %{NUMBER:cs-bytes:int}( %{NUMBER:time-taken:int})?" ,
"message", "%{TIMESTAMP_ISO8601:timestampiis} %{IPORHOST:s-sitename} %{WORD:cs-method} %{URIPATH:cs-uri-stem} %{NOTSPACE:cs-uri-query} %{NUMBER:s-port} %{NOTSPACE:cs-username} %{IPORHOST:clientip} %{NOTSPACE:cs(User-Agent)} %{NOTSPACE:cs(Referer)} %{NUMBER:response:int} %{NUMBER:sc-substatus:int} %{NUMBER:sc-substatus:int}( %{NUMBER:time-taken:int})?" ,
"message", "%{TIMESTAMP_ISO8601:timestampiis} %{WORD:cs-method} %{URIPATH:cs-uri-stem} %{NOTSPACE:cs-post-data} %{NUMBER:s-port} %{IPORHOST:clientip} HTTP/%{NUMBER:c-http-version} %{NOTSPACE:cs(User-Agent)} %{NOTSPACE:cs(Cookie)} %{NOTSPACE:cs(Referer)} %{NOTSPACE:cs-host} %{NUMBER:sc-status:int} %{NUMBER:sc-bytes:int} %{NUMBER:cs-bytes:int}( %{NUMBER:time-taken:int})?"
]
}

useragent {
source => "cs(User-Agent)"
}
if "window" not in [tags] {
 mutate {
   add_tag => [ "linux" ]
}
     } 
if [type] == "syslog" {

grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

}
 #grok {
 #  match => { "message" => "type=EXECVE .*(\d*.): %{GREEDYDATA:command}" }
 #  overwrite => [ "message" ]
 #  add_field => { "bashlog" => "bashlog" }
# }     
if [type] == "auth-log" {
 grok {
    add_tag => [ "valid" ]

    # Example log entries for both failed and successful logins:
    #
    # Aug  9 09:13:25 vmubu01 sshd[5761]: Failed password for root from 218.87.111.109 port 45712 ssh2
    # Aug  9 09:13:31 vmubu01 sshd[5761]: message repeated 2 times: [ Failed password for root from 218.87.111.109 port 45712 ssh2]
    # Aug 14 17:25:47 vmubu01 sshd[22101]: Failed password for invalid user test from 115.68.23.130 port 43092 ssh2
    # Aug 16 13:47:44 vmubu01 sshd[730]: Accepted publickey for username from 192.168.1.225 port 38783 ssh2: RSA 01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10
    # Aug 16 13:47:57 vmubu01 sshd[816]: Accepted password for username from 192.168.1.225 port 38786 ssh2
    match => [
    #  "message", "%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT}\])?: %{WORD:login} password for %{USERNAME:username} from %{IP:clientip} %{GREEDYDATA}",
      "message", "%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT}\])?: message repeated 2 times: \[ %{WORD:login} password for %{USERNAME:username} from %{IP:clientip} %{GREEDYDATA}",
      "message", "%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT}\])?: %{WORD:login} password for invalid user %{USERNAME:username} from %{IP:clientip} %{GREEDYDATA}",
      "message", "%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT}\])?: %{WORD:login} %{WORD:auth_method} for %{USERNAME:username} from %{IP:clientip} %{GREEDYDATA}" ,
      "message", "\[%{WORD}\:%{USERNAME:username} %{DATA} %{DATA} %{DATA} %{WORD}\:%{DATA:cwd}%{DATA}\]\: %{GREEDYDATA:exe_command}"
    ]
  }


}
grok {
match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
overwrite => [ "message" ]
add_field => { "nginxlog" => "nginx-access" }
}


 
grok {
match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"]
overwrite => [ "message" ]
add_field => { "nginxlog" => "nginx-error" }
}
  
mutate {
convert => ["response", "integer"]
convert => ["bytes", "integer"]
convert => ["responsetime", "float"]
convert => [ "[geoip][coordinates]", "float"]

}

  geoip {
source => "ip.dst"
target => "geoip-ipdst"
add_tag => [ "tshark-geoip" ]
#add_field => [ "[geoip-ipdst][coordinates]", "%{[geoip-dst][longitude]}" ]
#add_field => [ "[geoip-ipdst][coordinates]", "%{[geoip-dst][latitude]}"  ]
}
 geoip {
source => "ip.src"
target => "geoip-ipsrc"
add_tag => [ "tshark-geoip" ]
#add_field => [ "[geoip-ipsrc][coordinates]", "%{[geoip-src][longitude]}" ]
#add_field => [ "[geoip-ipsrc][coordinates]", "%{[geoip-src][latitude]}"  ]
}
  geoip {
source => "col.Destination"
target => "geoip-coldst"
add_tag => [ "tshark-geoip" ]
#add_field => [ "[geoip-ipdst][coordinates]", "%{[geoip-dst][longitude]}" ]
#add_field => [ "[geoip-ipdst][coordinates]", "%{[geoip-dst][latitude]}"  ]
}
 geoip {
source => "col.Source"
target => "geoip-colsrc"
add_tag => [ "tshark-geoip" ]
#add_field => [ "[geoip-ipsrc][coordinates]", "%{[geoip-src][longitude]}" ]
#add_field => [ "[geoip-ipsrc][coordinates]", "%{[geoip-src][latitude]}"  ]
}
  geoip {
source => "[source][ip]"
target => "geoip-src"
add_tag => [ "netflow-geoip" ]
add_field => [ "[geoip-src][coordinates]", "%{[geoip-src][longitude]}" ]
add_field => [ "[geoip-src][coordinates]", "%{[geoip-src][latitude]}"  ]
}

 geoip {
source => "[dest][ip]"
target => "geoip-dst"
add_tag => [ "netflow-geoip" ]
add_field => [ "[geoip-dst][coordinates]", "%{[geoip-dst][longitude]}" ]
add_field => [ "[geoip-dst][coordinates]", "%{[geoip-dst][latitude]}"  ]
}
geoip {
source => "clientip"
target => "geoip"
add_tag => [ "nginx-geoip" ]
add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
}
 
date {
match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
remove_field => [ "timestamp" ]
} 
useragent {
source => "agent"
} 
if [type] == "wineventlog" {
   mutate {
      add_tag => [ "parsewin" ]
     add_field => [ "event_message", "%{message}" ]
   }

}
if [agent] =~ /\"Go-http-client\/1.1"/
  {
    drop {}
  }

 # if [client_ip] == "127.0.0.1" and [ip] == "127.0.0.1" and [type] != "http" and [type] != "mysql"
 # {
 ##   drop {}
  #}
 if [direction] == "out" and [port] == "80" or [port] == "443"
  {
    drop {}
  }
  
if [command] =~ /.*a0="\/sbin\/udevadm".*/
{
  drop { }
}
if [request] =~ /.*monitor.*/
{
  drop { }
}

if [request] =~ /\/bundles\/4b5a84aaf1c9485e060c503a0ff8cadb.woff2/
{
  drop { }
}
  if [request] =~ /\/bundles\/bdba476a300fc6e2e8f5e7d9a4eea397.svg/
{
  drop { }
}

if [source.ip] =~  /172.1.*/   or [dest.ip] =~  /172.1.*/
  {
    drop { }
  }


if [exe_command] == "/usr/sbin/sshd -R"
  {
    drop { }
  }

#if [type] == "nginx-error" {

 
#geoip {
#source => "client"
#target => "geoip"
#add_tag => [ "nginx-geoip" ]
#}
 
#date {
#match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
#add_field => { "received_at" => "%{YYYY/MM/dd}"}
#remove_field => [ "timestamp" ]
#match => [ "timestamp" , "${TIMESTAMP_ISO8601}" ]
#add_field => { "received_at" => "%{YYYY/MM/dd}"}
#remove_field => [ "timestamp" ]
#}
#}
#   if [response] == "404" { 
#      metrics {
#      meter => [ "count404" ]
#      flush_interval => 30
#      clear_interval => 30
#      add_tag => "metric"
#    }

}



output {
 
if [type] != "collectd" and "tcpjson" in [tags] 
    { 
   elasticsearch {
    hosts => "elasticsearch:9200"
    manage_template => false
    index => "nxlog-%{+YYYY.MM.dd}"
    document_type => "nxlog-elk"
 }
}
  if [type] != "collectd" { 
   elasticsearch {
    hosts => "elasticsearch:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
 }
}

#if [system][filesystem][device_name] == "/dev/xvda1" {
#stdout {
# codec => rubydebug { metadata => true }
 
 #}
#}

}